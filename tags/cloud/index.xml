<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud on Joe Heaton.dev</title>
    <link>https://www.heaton.dev/tags/cloud/</link>
    <description>Recent content in cloud on Joe Heaton.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&amp;copy; Joe Heaton</copyright>
    <lastBuildDate>Fri, 23 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.heaton.dev/tags/cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible via Google Cloud IAP Tunnel</title>
      <link>https://www.heaton.dev/2022/09/ansible-via-google-cloud-iap-tunnel/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.heaton.dev/2022/09/ansible-via-google-cloud-iap-tunnel/</guid>
      <description>Ansible is a great tool for managing configuration across a fleet of compute resources, but it struggles with dynamic sets of compute that are constantly being destroyed and spawned since it the user has to maintain a static list of hostnames.
I&amp;rsquo;ve brought together some scripts to make it trivial to connect Ansible to your Google Cloud compute infrastructure:
 https://github.com/joeheaton/ansible-gcp
Clone the repo and edit inventory.gcp.yml:
--- plugin: gcp_compute projects: - MY-PROJECT auth_kind: application keyed_groups: - key: labels prefix: label - key: zone prefix: zone - key: (tags.</description>
    </item>
    
    <item>
      <title>Terraform init-validate-plan-apply Bash function</title>
      <link>https://www.heaton.dev/2022/07/terraform-init-validate-plan-apply-bash-function/</link>
      <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.heaton.dev/2022/07/terraform-init-validate-plan-apply-bash-function/</guid>
      <description>&lt;p&gt;Tired of typing Terraform init, validate, apply? I&amp;rsquo;ve written this bash function to speed this up and implement some good practices.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Cloud CLI &#39;gcloud&#39; Variables</title>
      <link>https://www.heaton.dev/2022/06/google-cloud-cli-gcloud-variables/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.heaton.dev/2022/06/google-cloud-cli-gcloud-variables/</guid>
      <description>&lt;p&gt;I find it useful to frontload my terminals with context about my environment; You wouldn&amp;rsquo;t want to deploy to the wrong environment now would you?&lt;/p&gt;
&lt;p&gt;Here I extract information from &lt;a href=&#34;https://cloud.google.com/cli&#34; target=&#34;_blank&#34;&gt;Google Cloud CLI&lt;/a&gt; and print it at the start of every new terminal tab in order to understand exactly where my Google Cloud API requests will go by default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;font color=&#34;#5FAF00&#34;&gt;GCP&lt;/font&gt; $GCP_APP_CRED_PROJECT=my-project
&lt;font color=&#34;#870000&#34;&gt;GCP&lt;/font&gt; $GCP_CONFIGURATION=my-project
&lt;font color=&#34;#0000FF&#34;&gt;GCP&lt;/font&gt; $GCP_PROJECT=my-project&lt;/pre&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Use Terraform Graph in MermaidJS</title>
      <link>https://www.heaton.dev/2022/05/use-terraform-graph-in-mermaidjs/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.heaton.dev/2022/05/use-terraform-graph-in-mermaidjs/</guid>
      <description>&lt;p&gt;Terraform has a built-in command to generate a Graphviz digraph representing the output of &lt;code&gt;terraform plan&lt;/code&gt;, but this output is pretty messy and can&amp;rsquo;t render in MermaidJS.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
